#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Filesystems, IPCs y Servidores Concurrentes 
\end_layout

\begin_layout Section*
TP especial SO - 1
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Integrantes:
\end_layout

\begin_layout Enumerate
Castiglione, Gonzalo - 
\begin_inset Formula $49138$
\end_inset


\end_layout

\begin_layout Enumerate
Gomez, Horacio - 
\begin_inset Formula $50825$
\end_inset


\end_layout

\begin_layout Enumerate
Orsay, Juan Pablo - 
\begin_inset Formula $49373$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Resumen
\end_layout

\begin_layout Standard
Para este trabajo se pedia la realizaciòn de una simulación de empresas,
 la cuales tienen aviones a su mando, encargados de distribuir sus medicamentos
 por una serie de ciudades con conecciones entre ellas limitadas.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Modelo
\end_layout

\begin_layout Standard
Para llegar a la estructura de la simulación actual, primero se estudio
 la diferencia entre procesos y threads.
 Los threads presentaban la ventaja de ser 
\begin_inset Formula $light$
\end_inset

 
\begin_inset Formula $weight$
\end_inset

 y que no necesitan comunicación mediante un 
\begin_inset Formula $IPC$
\end_inset

 para pasarse infromacion dado que corren en la misma zona de codigo.
 Mientras que los procesos realizan una copia de todas sus variables cuando
 son creados y corren indemendientes de los cámbios que el proceso padre
 haga.
 Teniendo estos detalles en cuenta, se decidió que cada 
\begin_inset Formula $Compania$
\end_inset

 debia ser un proceso, ya que no tiene porque compartir su información con
 nadie mas.
 Y, dado que los aviones comparten todo con su empresa, nos resulto conveniente
 optar por 
\begin_inset Formula $Threads$
\end_inset

 para estos.
\end_layout

\begin_layout Standard
Al tomar este tipo de estructura, surgio el problema sobre típos de mensajes
 entre estos procesos y cual era la forma óptima de comúnicarlos dado que
 el pasaje de información es mucho mas complejo que la comunicación entre
 threads, ya que requiere tanto sincronización como una zona de memoria
 ya preparada para la lectura y escritura.
 
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Tomada esta decision de diseño, se debia resolver además el problema de:
\end_layout

\begin_layout Enumerate
Mostrar en pantalla los cámbios de cada 
\begin_inset Formula $Compania$
\end_inset

 luego de cada turno.
\end_layout

\begin_layout Enumerate
Reflejar en las demás companias los cámbios producidos en el mapa por la
 compaia 
\begin_inset Formula $X$
\end_inset

 antes que la compania 
\begin_inset Formula $Y$
\end_inset

 intente hacer un cámbio sin haber recibido esta notificación.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
La primer solución propuesta fue la de crear un zona de memoria compartida
 la que involucraria tener en cuenta los siguientes aspectos:
\end_layout

\begin_layout Itemize
Todo aquel proceso que quisiese modificar esta zona de memoria, tendría
 que hacerlo siempre bloqueando previamente un mutex (o semaforo en su defecto)
 y luego de realizados los cámbios liberar el mutex.
 Lo cual obligaria a los demás procesos a 
\begin_inset Quotes eld
\end_inset

esperar
\begin_inset Quotes erd
\end_inset

 en una cola a acceder a esta memoria.
 El problema con esta implementación es que si se hubiese implementado,
 no se se hubiese respetando la consigna de usar los diferentes típos de
 ipcs para la comunicación entre procesos.
 Sin embargo es una solución agradable ya que evitaba el tener que andar
 notificando a otras companias mediante paquetes especiales sobre cámbios
 realizados.
\end_layout

\begin_layout Standard
La segunda solución propuesta involucaraba un proceso 
\begin_inset Formula $servidor$
\end_inset

 que se encargaría de la administración de turnos y recursos para cada compania.
\end_layout

\begin_layout Itemize
Este presentaba la ventaja de tener una implementación muy sencilla ya que
 solamente se ocuparía de levantar semaforos y bajarlos para que las companias
 toquen el mapa en forma sincronizad y además asegurar que ningúna valla
 a jugar dos veces seguidas (luego veremos que, como en toda buena idea,
 trajo sus complicaciones).
\end_layout

\begin_deeper
\begin_layout Itemize
A su vez se podia saber cuando todas las companias habían terminado un turno;
 por lo que actualizar la UI por turno resultaria muy sencillo.
\end_layout

\begin_layout Itemize
La única contra que encontramos es que la comunicación con las companias
 se volvia un tanto compleja.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \hspace{}
\length 1cm
\end_inset


\begin_inset Graphics
	filename Tp Diseno.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estructura de procesos y threads de la simulación
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
Al iniciar el programa, lo primero que se realiza es el parseo de la información
 (de companias, mapas), inicializacion del entorno (IPCs, semaforos, handlers
 de las señales, inicializacion de los nuevos procesos...) y luego de terminado
 todo esto, se procede a inicializar el proceso de UI/Servidor.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Uno de los primeros (y mas grandes) problemas que se presentaron al aplicar
 este diseño era de como reflejar los cámbios hechos por una compania en
 todas las demás.
 Inicialmente, se decidió que el servidor tendría una (y la única) instancia
 del mapa y que se 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
pasaría
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 al principio del turno a la compania, esta lo modificaria y luego se lo
 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
pasaría
\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\uuline default
\uwave default
\noun default
\color inherit
 nuevamente al servidor con los cámbios.
 Y asi para cada compania.
 
\end_layout

\begin_layout Standard
Pero esta solución era muy costosa, ya que además de tener que mandar el
 mapa, se debia mostrar por pantalla (en forma ordenada) toda la información
 de la empresa; por lo que además de tener que pasar el mapa dos veces,
 se tendría que sumar toda la compania, lo cual implicaria muchísimo procesamien
to y uso de memoria que podria ser ahorrado!.
\end_layout

\begin_layout Standard
Lo que nos llevo a proponer una segunda solución alternativa, la cual implicaba
 que tanto el servidor como las companias tendrían una instancia del mapa(inicia
l) y este se iría actualizando mediante paquetes 
\begin_inset Formula $“updates”$
\end_inset

 que se enviarian desde el servidor luego de cada turno.
 
\end_layout

\begin_layout Standard
Esto presenta la ventaja que la comunicación entre los procesos se reduciría
 a únicamente sus cámbios! pero la contra esta en que requeria de una clase
 
\begin_inset Formula $serializer$
\end_inset

 muchísimo mas completa que la que se tenia en mente.
 Sin embargo, luego de discutirlo se llego a que se esta era la mejor implementa
ción 
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
No se presentan calculos de cuanto mas se mejora dado que es muy fácil notar
 la cantidad de infromacion que se ahorra por cada envio de información
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
Teniendo en cuenta todas estas consideraciones, la lógica del 
\begin_inset Formula $servidor$
\end_inset

 seguiría el siguiente comportamiento:
\end_layout

\begin_layout LyX-Code
Por cada compania:
\end_layout

\begin_deeper
\begin_layout LyX-Code
Se le da un turno.
\end_layout

\begin_layout LyX-Code
Se espera a que finalize su turno.
\end_layout

\begin_layout LyX-Code
Se hace un broadcasting de los updates leidos a 
\end_layout

\begin_layout LyX-Code
   todas las demás companias.
\end_layout

\end_deeper
\begin_layout LyX-Code
Actualizar UI.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
De esta manera, resulta fácil imaginar la lógica de una 
\begin_inset Formula $compania$
\end_inset

:
\end_layout

\begin_layout LyX-Code
Despierto a todos mis aviones.
\end_layout

\begin_layout LyX-Code
Cuando todos movieron, actualizo a un nuevo target a todos
\end_layout

\begin_layout LyX-Code
    aquellos que llegaron a destino.
\end_layout

\begin_layout LyX-Code
Escribo los paquetes con los cámbios realizados por cada uno al servidor.
\end_layout

\begin_layout LyX-Code
Me escribo a mi misma.
\end_layout

\begin_layout Standard
A continuación de presenta un esquema de como se penso a una compania:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset space \hspace{}
\length 1cm
\end_inset


\begin_inset Graphics
	filename airlineModl.gif
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Esquma de una compania
\end_layout

\end_inset

(figura tomada del sitio: http://www.chuidiang.com)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Tal como se explico anteriormente, cada 
\begin_inset Formula $Thread$
\end_inset

 representa a un avion activo, en donde este tiene su memoria propia (items,
 posicion, target, ...), una memoria compartida (el mapa) y un comportamiento.
 Cuando un avion no tiene movimientos posibles, se mata al proceso, y este
 ciclo sigue hasta que ningun avion tenga movimientos disponibles.
 En cuyo caso se envia un paquete de tipo 
\begin_inset Formula $company$
\end_inset

 
\begin_inset Formula $status$
\end_inset

 
\begin_inset Formula $update$
\end_inset

 al servidor y se encargara de hacer lo que sea necesario.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
IPC
\end_layout

\begin_layout Standard
Al principio se comenzó experimentando comunicación entre procesos con pipes.
 Luego de varias complicaciones de llego a una primera version de metodos
 de IPC formada por diversos metodos.
 Esta nos sirvio como base para ir experimentando como funcionaban los semaforos
 y mutex en linux.
 Luego, a medida que el programa iba tomando forma y sentido, se comenzó
 a mejorarla y se implementó 
\begin_inset Formula $Fifos$
\end_inset

, 
\begin_inset Formula $MsgQueues$
\end_inset

, 
\begin_inset Formula $Sockets$
\end_inset

 y 
\begin_inset Formula $Shared$
\end_inset

 
\begin_inset Formula $Memory$
\end_inset

.
\end_layout

\begin_layout Standard
Uno de los mayores inconvenientes al momento de implementación de los IPCS
 era la sincronización, ya que, por mas pruebas que se les halla a cada
 antes de ser montados al codigo de la simuacion, se tenia el problema que
 cuando no se leia en forma ordenada, este decia que no habia mensajes cuando
 se espereaba que los hubiera, lo que llevaba a mucha perdida de tiempo
 en debugeo de codigo.
\end_layout

\begin_layout Standard
Una de las complicaciones que tuvimos con los IPCs era el tamaño de los
 datos a escribir, dado que para algunos IPCs era mas fácil trabajar con
 tamaños fijos y con otros daba igual, se opto por paquetes de tamaño fijo.
 Esto fácilito mucho la programacion de la interfaz de comunicación, pero
 tiene el problema importante que si se quiere serializar una gran compania
 con muchos aviones e items, puede resultar que este string serializado
 resultante sea mas largo que el tamaño default.
 Lo que provocaria que el paquete no se mande y quede inconsistente el resultado
 de la simulación.
 
\end_layout

\begin_layout Standard
De todas maneras, si esto llegase a suceder, un mensade de error se mostrara
 en el 
\begin_inset Formula $log.txt$
\end_inset

.
 En cuyo caso lo único que se tiene que arreglar es el 
\begin_inset Formula $DATA$
\end_inset

_
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $SIZE$
\end_inset

 definido en 
\begin_inset Formula $communicator.h$
\end_inset

.
\end_layout

\begin_layout Standard
Otro inconventiente que trae esta decicion que tamaño fijo para mensajes
 es el desperdicio de memoria innecesario por ejemplo para mandar un pequeño
 update.
 Sin embargo, no es un gran problema, si el dia de mañana se necesitase
 que esto no sea asi, bastara con simplemente cambiar la implementación
 del IPC correspondiente (no afectaría de ningúna manera a la simulación).
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Subsection
Shared Memory
\end_layout

\begin_layout Standard
La implementación que actualmente se tiene para shared memory, es aprovechar
 el hecho que los tamaños de los mensajes son fijos y reservar en memoria
 bloques con un tamaño de 
\begin_inset Formula $M$
\end_inset

 mensajes por cada proceso que quiera escribir.
 Es decir, dividimos un pedazo fijo de memoria en 
\begin_inset Formula $NxN$
\end_inset

 lugares, en donde 
\begin_inset Formula $N$
\end_inset

 esta dado por la cantidad de luagres especificados en 
\begin_inset Formula $ipc$
\end_inset

_
\begin_inset Formula $init$
\end_inset

.
 Esta implementación ofrece la ventaja de ser muy eficiente en cuando acceso
 a un mensaje, ya que tiene una complejiad 
\begin_inset Formula $o(1)$
\end_inset

, pero la gran contra es que es mucha la memoria que necesita tener reservada.
\end_layout

\begin_layout Standard
Dentro de cada lugar de esta matriz, se tiene un array con los 
\begin_inset Formula $M$
\end_inset

 luagres ya mencionados y adelante de todo un 
\begin_inset Formula $char$
\end_inset

 indicando cuantos se tienen en la lista.
\end_layout

\begin_layout Subsection
Típos de paquetes
\end_layout

\begin_layout Standard
Actualmente la comunicación entre 
\begin_inset Formula $servidor\Longleftrightarrow compania$
\end_inset

 se realiza mediante tres típos de paquetes:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize
City update: Este paquete contiene información de que item fue modificado
 en que ciudad y en que cantidad.
 Si muchas ciudades fueron modificadas en un turno, uno por cada cámbio
 va a ser enviado al servidor.
\end_layout

\begin_layout Itemize
City status update: Este paquete se envia cunado una compania detecto que
 sus aviones no pueden abastecer a mas ciudades y quiere 
\begin_inset Quotes eld
\end_inset

darse de baja
\begin_inset Quotes erd
\end_inset

 en el servidor.
 Es importante esto ya que, una vez que una compania se desactiva en el
 servdor, automaticamante se deja de encolarle actualizaciones.
 Lo que resulta es un ahorro importante en llamadas al serializer y de uso
 de recursos del IPC para mantener mensajes que nunca serial leidos.
\end_layout

\begin_layout Itemize
Company update: este es el paquete mas grande que se tiene, aqui es donde
 se guarda la infromacion de todos los aviones que tiene una compania.
 El problema es que crece mucho a medida que se agregan mas items y/o aviones
 la misma.
 Por lo que quedaria en el 
\begin_inset Formula $"wish$
\end_inset

 
\begin_inset Formula $list"$
\end_inset

, partir este paquete en otros mas pequeños y en lo posible con tamaño constante
, para de esta manera poder reducir el DATA_SIZE que se necesita tener reservado
 para usar el IPC.
 Que en estos momentos seria lo que mas recursos consume de la simulación.
 Se tenia pensando para estos, realizar lo mismo que para las ciudades,
 solamente mandar pequelos paquetes updates en vez de repetir una y otra
 vez la misma infromacion que no sufrio camibios.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Otras consideraciones
\end_layout

\begin_layout Standard
Uno de los problemas mas dificiles que constantemente se presentaba durante
 el desarrollo del trabajo era sobre la dura eleccion entre 
\begin_inset Formula $tiempo$
\end_inset

 
\begin_inset Formula $vs$
\end_inset

 
\begin_inset Formula $memoria$
\end_inset

.
 Si se debia hacer cierto calculo al momento de neceitarlo o bien guardarlo
 previemente y simplemente actualizarlo cuando sea necsario.
\end_layout

\begin_layout Standard
Al principio, cada vez que un avion llegaba a una ciudad, se realizaba un
 DFS para encontrar el camino a las ciudad mas corta que sea abastecible.
 El problema es que este mismo DFS se estaba realizando por cada avion,
 por cada compania en cada turno.
 Lo que nos parecia que se realizaba el mismo calculo innecesariemente muchisima
s veces.
 Por lo que se propuso una matriz en donde, por cada compania se colocaria
 un indice diciendo a donde hay que ir para acceder a la ciudad 
\begin_inset Formula $X$
\end_inset

 (para cualquier ciudad) y a que distancia se encuentra.
 Esto reduciría la llamda al 
\begin_inset Formula $DFS$
\end_inset

 a desrefenciar una matriz (
\begin_inset Formula $o(1)$
\end_inset

), esta fue una de las luchas mencionadas anteriormente, sobre la ultiliacion
 de memoria espacial o de tiempo
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Esta razon de necesitar implementar un DFS surgio en casos cuando solo se
 podia abastecer a uan ciudad que no era adyacente a la posicion actual
 del avion.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Otro cámbio de la misma indole que se propuso durante la realizcion del
 trabajo es que cada ID de un elemento representaba a la pocision en el
 array que ocuparía.
 Es decir, el elemento con Id 
\begin_inset Formula $5$
\end_inset

, se lo encontraria en el array de elementos en la quinta posicion.
 Esto trae consecuencias como tener un array de 
\begin_inset Formula $20$
\end_inset

 elementos solo para tener un elemento con ID 
\begin_inset Formula $20$
\end_inset

.
 Sin embargo, para la busqueda de items (la cual se reliza constantemente)
 reduce un algortimo de 
\begin_inset Formula $o(n)$
\end_inset

 a uno de 
\begin_inset Formula $o(1)$
\end_inset

 con el precia de agregar un extra en la cantidad de memoria necesaria para
 su funcionamiento.
\end_layout

\begin_layout Standard
Se tuvo un problema de ultimo momento con dos de los 
\begin_inset Formula $IPCs$
\end_inset

 (Sockets y Fifos) que dejaron de andar y se trataron de arreglar pero no
 se pudo testear si verdaderamente tienen una funcionalidad 
\begin_inset Formula $100\%$
\end_inset

 correcta.
 
\end_layout

\begin_layout Standard
El problema con sockets es que no se bindean correctamente las companias
 con el servidor ya que cuando quiere conectar a las companias tira un error
 
\begin_inset Quotes eld
\end_inset

function not implemented
\begin_inset Quotes erd
\end_inset

.
 Nos hubiese dado mucho gusto encontrar la solución de esto pero nos quedamos
 sin tiempo para la entrega.
 
\end_layout

\begin_layout Subsection
Otras problemas
\end_layout

\begin_layout Standard
Un problema al que todavía no pudimos encontrar explicacion es porque los
 semaforos de 
\begin_inset Formula $System$
\end_inset

 
\begin_inset Formula $V$
\end_inset

 a veces no se inicializaban para ciertos valores de claves.
 Se intento eliminarlos, cambiar los flags de creacion, reiniciar la comutadora
 pero todo sin suerte! Mas raro resultaba aun que al sumarle un magic number
 al key, estos se creban y sin problema.
 Por lo que nuestra única alternativa fue la de pasar a semaforos de Posix.
 Los cuales resultaron increiblemente mas simples.
 Lo mismo sucede a veces con la creacion de los 
\begin_inset Formula $IPCs$
\end_inset

, que a veces no logran cerrarse correctamente al finalizar el programa
 o bien el recuso del SO se encuentra ocupado y se rehusa a crear los IPS
 terminando en resultados sin sentido, por lo que se recomienda que si esto
 sucede se utilize el comando 
\begin_inset Formula $ipcs$
\end_inset

 para verificar que no se tenga una excesiva cantidad de estos andando (se
 solucióna tambien reiniciando ya que para todo tipo de almacenamiento temproal,
 se utiliza la carpeta 
\begin_inset Formula $/tmp$
\end_inset

 del SO.
\end_layout

\begin_layout Standard
Se queria aclarar que si se testea la simulación de archivos que tienen
 formatos invalidos, el programa resultara en 
\begin_inset Formula $segmentation$
\end_inset

 
\begin_inset Formula $fault$
\end_inset

.
 Esto no fue arreglado ya que supusimos que lo importante de este trabajo
 practico no era ver quien hacia el parser mas robusto sino el de demostrar
 el poder del uso de IPCs.
 Por lo que se recomienda verificar bien el formato de los archivos antes
 de iniciar el programa.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Concusiones
\end_layout

\begin_layout Standard
Luego de realizado este trabajo practico, se aprendio sobre la potencia
 a la que se puede llevar un programa al hacerlos que sean capaces de dividir
 sus tareas en proecsos concretos y por sobre todo, al mantenerlos sincronizados.
 
\end_layout

\end_body
\end_document
