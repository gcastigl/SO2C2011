#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
TP especial SO - 1
\end_layout

\begin_layout Part
Resumen
\end_layout

\begin_layout Standard
Para este trabajo se pedia la realizacion de una simulacion de empresas,
 la cuales tienenaviones a su mando, encanrgados de distribuir sus medicamentos
 por una seria de ciudades con conecciones entre ellas limitadas.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Modelo
\end_layout

\begin_layout Standard
Uno de los problemas mas dificiles que constantemente se presentaba durante
 el desarrollo del trabajo era sobre la dura eleccion entre tiempo vs memoria.
 Si se debia hacer cierto calculo al momento de neceitarlo o bien guardarlo
 y simplemente actualizarlo cunado se necesite.
 (listar algunos ejemplos y soluicones como ser el parseo con memoria estatica,
 pre calculo de disancias antes de la simulacion...))
\end_layout

\begin_layout Standard
Otro problema que se presento era sobre que tipo de mesnajes y como debian
 comuincarse los procesos dado que la comunicacion entre procesos es mucho
 mas costosa que la comunicacion entre threads, pero al usar procesos se
 puede aprovechar de tener espacios de memorias separadas.
 Y es por esto es que nuestro dieño utiliza a las 
\begin_inset Formula $Companias$
\end_inset

 como procesos y cada una tiene 
\begin_inset Formula $n$
\end_inset

 threads (una por cada avion).
\end_layout

\begin_layout Standard
Tomada esta decision, el problema se presentaba ahora en :
\end_layout

\begin_layout Enumerate
Mostrar en pantalla los cambios de cada 
\begin_inset Formula $Compania$
\end_inset


\end_layout

\begin_layout Enumerate
Reflejar en las demas companias el cambio producido por la compaia 
\begin_inset Formula $X$
\end_inset

 en la compania 
\begin_inset Formula $Y$
\end_inset

 antes que esta otra intente hacer un cambio sin haber recibido esta notificacio
n.
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Itemize
La primer solucion era la de crear un zona de memoria compartida la que
 involucraria tener en cuenta los siguientes aspectos:
\end_layout

\begin_deeper
\begin_layout Itemize
Todo aquel proceso que quiera modificar esta zona de memoria, tendria que
 hacerlo siempre bloqueando previamente un mutex (o semaforo en su defecto)
 y luego de realizados los cambios liberar el mutex.
 Lo cual obligaria a los demas procesos a 
\begin_inset Quotes eld
\end_inset

esperar
\begin_inset Quotes erd
\end_inset

 en una cola a acceder a esta memoria.
 El problema con esta implementacion es que si se hubiese implementado,
 no se se hubiese respetando la consigna de usar los diferentes tipos de
 ipcs para la comunicacion entre procesos.
\end_layout

\end_deeper
\begin_layout Itemize
La segunda solucion involucaraba un proceso 
\begin_inset Formula $servidor$
\end_inset

 que para la administracion de turnos y recursos para cada compania.
\end_layout

\begin_deeper
\begin_layout Itemize
Este presentaba la ventaja de tener una implementacion muy sencilla ya que
 solamente se ocuparia de levantar semaforos y bajarlos para que las companias
 toquen el mapa sincronizadamente y ademas asegurar que ninguna valla a
 jugar dos veces seguidas (luego veremos que, como en toda buena idea, trajo
 sus buenas complicaciones).
\end_layout

\begin_layout Itemize
A su vez se podia saber cuando todas las companias habian hecho una jugada,
 por lo que actualizar la UI por turno era muy sencilla.
\end_layout

\begin_layout Itemize
La unica contra que encontramos es que la comunicacion con las companias
 se volvia un tanto compleja.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename Tp Diseno.png
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Estructura de procesos activos de la simulacion
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Uno de los primeros (y mas grandes) problemas que que se presentaron al
 aplicar este diseño era de como reflejar los cambios hechos por una compania
 en todas las demas.
 Inicialmente, se decidio que el servidor tendria una (y la unica) instancia
 del mapa y que se 
\begin_inset Formula $pasaria$
\end_inset

 al principio del turno a la compania, esta lo modificaria y luego se lo
 
\begin_inset Formula $pasaria$
\end_inset

 de vuelta al servidor con los cambios.
 Y asi para cada compania.
 Pero esto no solucionaba el problema, ya que ademas se debia mostrar por
 pantalla (en forma ordenada) toda la informacion de la empresa; por lo
 que ademas de tener que pasar el mapa dos veces, se tendria que sumar toda
 la compania, lo cual implicaria muchisimo procesamiento y uso de memoria!.
\end_layout

\begin_layout Standard
Lo que nos llevo a proponer una segunda solucion; esta implicaba que tanto
 el servidor como las companias tendrian una instancia del mapa (inicial)
 y este se iria actualizando mediante paquetes 
\begin_inset Formula $“updates”$
\end_inset

 que se enviarian desde el servidor.
 Esto presenta la ventaja que la comunicacion entre los procesos se reduciria
 a unicamente sus cambios! pero la contra esta en que requeria de una clase
 
\begin_inset Formula $serializer$
\end_inset

 muchisimo mas completa.
 Sin embargo, luego de algunas pruebas y de discutirlo se llego a que se
 esta era la mejor implementacion.
 (MOSTRAR ALGUNOS RESULTADOS AQUII).
\end_layout

\begin_layout Standard
Por lo que con esta eleccion, la logica del 
\begin_inset Formula $servidor$
\end_inset

 seguiria el siguiente comportamiento:
\end_layout

\begin_layout LyX-Code
Por cada compania:
\end_layout

\begin_deeper
\begin_layout LyX-Code
Se le da un turno.
\end_layout

\begin_layout LyX-Code
Se hace un broadcasting de los updates enviados por el a 
\end_layout

\begin_layout LyX-Code
   todas las demas companias.
\end_layout

\end_deeper
\begin_layout Standard
De esta manera, resulta facil imaginar la logica de una 
\begin_inset Formula $compania$
\end_inset

:
\end_layout

\begin_layout LyX-Code
Despierto a todos mis aviones.
\end_layout

\begin_layout LyX-Code
Cuando todos movieron, actualizo a un nuevo target a todos
\end_layout

\begin_layout LyX-Code
    aquellos que llegaron a destino.
\end_layout

\begin_layout LyX-Code
Escribo los paquetes con los cambios realizados por cada uno al servidor.
\end_layout

\begin_layout LyX-Code
Me escribo a mi misma.
\end_layout

\begin_layout Standard
A continuacion de presenta un esquema de como se penso a una compania:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename airlineModl.gif
	lyxscale 50
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Esquma de una compania
\end_layout

\end_inset

(figura tomada del sitio: http://www.chuidiang.com)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la figura mostrada, cada 
\begin_inset Formula $Thread$
\end_inset

 representa a un avion activo, en donde este tiene su memoria propia (items,
 posicion, target, ...), una memoria compartida (el mapa) y un comportamiento.
 Cuando ningun avion tiene movimientos posibles, se mata al proceso, y este
 ciclo sigue hasta que ningun avion tenga movimientos disponibles.
 En cuyo caso se envia un paquete de tipo 
\begin_inset Formula $company$
\end_inset

 
\begin_inset Formula $status$
\end_inset

 
\begin_inset Formula $update$
\end_inset

 al servidor y se encargara de hacer lo que sea necesario.
\end_layout

\begin_layout Subsection
IPC
\end_layout

\begin_layout Standard
Al principio se comenzo experimentando comunicacion entre procesos con pipes.
 Luego de varias complicaciones de llego a una primera version de metodos
 de IPC formada por diversos metodos.
 Esta nos sirvio como base para ir experimentando como funcionaban los semaforos
 y mutex en linux.
 Luego, a medida que el programa iba tomando forma y sentido, se comenzo
 a mejorarla y se implemento Fifos, MsgQueues, Sockets y Shared Memory
\begin_inset Foot
status open

\begin_layout Plain Layout
Debido a falta de tiempo y experiencia con manejo de memoria compartida
 en linux, no se logro implementar esta funcionalidad completamente por
 lo que no esta funcional.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Uno de los mayores inconvenientes al momento de implementacion de los IPCS
 era la sincronizacion, ya que, por mas que se hallan probado en test antes
 de ser montados al codigo de la simuacion, se tenia el problema que cuando
 no se leia en forma ordenada, este decia que no habia mensajes(o bien entregaba
 mensajes vacios) y cuandos se espereana que los hubiera, lo que llevaba
 a mucha perdida de tiempo en debugeo de codigo.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Consideraciones de tiempo vs memoria
\end_layout

\begin_layout Standard
Al principio, cada vez que un avion llegaba a una ciudad, se realizaba un
 DFS por cada ciudad para encontrar el camino a las ciudad mas corta.
 El problema es que este mismo DFS se estaba realizando por cada avion,
 por cada compania en cada turno.
 Lo que nos parecia que se realizaba el mismo calculo innecesariemente muchisima
s veces.
 Por lo que se propuso una matriz en donde, por cada compania se colocaria
 un indice diciendo a donde hay que ir para acceder a la ciudad 
\begin_inset Formula $X$
\end_inset

 (para cualquier ciudad) y a que distancia se encuentra.
 Esto reduciria la llamda al 
\begin_inset Formula $DFS$
\end_inset

 a desrefenciar una matriz (
\begin_inset Formula $o(1)$
\end_inset

), esta fue una de las luchas mencionadas anteriormente, sobre la ultiliacion
 de memoria espacial o de tiempo.
\end_layout

\begin_layout Standard
Otro cambio de la misma indole que se propuso durante la realizcion del
 trabajo es que cada ID de un elemento representaba a la pocision en el
 array que ocuparia.
 Es decir, el elemento con Id 
\begin_inset Formula $5$
\end_inset

, se lo encontraria en el array de elementos en la quinta posicion.
 Esto trae consecuencias como tener un array de 
\begin_inset Formula $20$
\end_inset

 elementos solo para tener un elemento con ID 
\begin_inset Formula $20$
\end_inset

.
 Sin embargo, para la busqueda de items (la cual se reliza constantemente)
 reduce un algortimo de 
\begin_inset Formula $o(n)$
\end_inset

 a uno de 
\begin_inset Formula $o(1)$
\end_inset

.
 Sin embargo, nuvamente, agrega une extra en la cantidad de memoria necesaria
 disponible.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Concusiones
\end_layout

\begin_layout Standard
Luego de realizado este trabajo practico, se aprendio sobre la potencia
 que se puede tener al realizar programas que sean capaces de dividir sus
 tareas en proecsos concretos y por sobre todo, al mantenerlos sincronizados.
 
\end_layout

\end_body
\end_document
